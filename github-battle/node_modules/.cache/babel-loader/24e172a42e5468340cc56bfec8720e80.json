{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Battle.js\";\nimport React, { Component } from 'react';\nimport { FaUserFriends, FaFighterJet, FaTrophy, FaTiemsCircle, FaTimesCircle } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport Results from \"./Results\";\nimport { ThemeConsumer } from '../contexts/theme';\n\nfunction Instructions() {\n  return React.createElement(ThemeConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"instructions-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"center-text header-lg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"Instructions\"), React.createElement(\"ol\", {\n    className: \"container-sm grid center-text battle-instructions\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"header-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"Enter two Github users\"), React.createElement(FaUserFriends, {\n    className: \"bg-light\",\n    color: \"rgb(255, 191, 116\",\n    size: 140,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"header-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Battle\"), React.createElement(FaFighterJet, {\n    className: \"bg-light\",\n    color: \"#727272\",\n    size: 140,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  })), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"header-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"See the winners\"), React.createElement(FaTrophy, {\n    className: \"bg-light\",\n    color: \"rgb(255, 215, 0)\",\n    size: 140,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  })))));\n}\n\nclass PlayerInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.onSubmit(this.state.username);\n  }\n\n  handleChange(event) {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      className: \"column player\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"username\",\n      className: \"player-label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, this.props.label), React.createElement(\"div\", {\n      className: \"row player-inputs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"username\",\n      className: \"input-light\",\n      autoComplete: \"off\",\n      value: this.state.username //control the value in the component's state\n      ,\n      onChange: this.handleChange //when user inputs, handleChange updates state which then updates value\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"btn dark-btn\",\n      type: \"submit\",\n      disabled: !this.state.username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\nPlayerInput.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired\n};\n\nfunction PlayerPreview({\n  username,\n  onReset,\n  label\n}) {\n  return React.createElement(\"div\", {\n    className: \"column player\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"player-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, label), React.createElement(\"div\", {\n    className: \"row bg-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"player-info\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"avatar-sm\",\n    src: \"https://github.com/\".concat(username, \".png?size=200\"),\n    alt: \"Avatar for \".concat(username),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    href: \"https://github.com/\".concat(username),\n    className: \"link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, username)), React.createElement(\"button\", {\n    className: \"btn-clear flex-center\",\n    onClick: onReset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(FaTimesCircle, {\n    color: \"rgb(194, 57, 42)\",\n    size: 26,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }))));\n}\n\nPlayerPreview.propTypes = {\n  username: PropTypes.string.isRequired,\n  onReset: PropTypes.func.isRequired,\n  label: PropTypes.string.isRequired\n};\n\nclass Battle extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerOne: null,\n      playerTwo: null,\n      battle: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  handleSubmit(id, player) {\n    this.setState({\n      [id]: player\n    });\n  }\n\n  handleReset(id) {\n    this.setState({\n      [id]: null\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          playerOne = _this$state.playerOne,\n          playerTwo = _this$state.playerTwo,\n          battle = _this$state.battle;\n\n    if (battle === true) {\n      return React.createElement(Results, {\n        playerOne: playerOne,\n        playerTwo: playerTwo,\n        onReset: () => this.setState({\n          playerOne: null,\n          playerTwo: null,\n          battle: false\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(Instructions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"players-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"center-text header-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \" Players \"), React.createElement(\"div\", {\n      className: \"row space-around\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, playerOne === null //if we haven't already rendered player1, render it\n    ? React.createElement(PlayerInput, {\n      label: \"Player One\",\n      onSubmit: player => this.handleSubmit('playerOne', player),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }) : React.createElement(PlayerPreview //if we have rendered player1 show preview of player\n    , {\n      username: playerOne,\n      label: \"Player One\",\n      onReset: () => this.handleReset('playerOne'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }), playerTwo === null //if we haven't already rendered player2, render it\n    ? React.createElement(PlayerInput, {\n      label: \"Player Two\",\n      onSubmit: player => this.handleSubmit('playerTwo', player),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }) : React.createElement(PlayerPreview //if we have rendered player2 show preview of player\n    , {\n      username: playerTwo,\n      label: \"Player Two\",\n      onReset: () => this.handleReset('playerTwo'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })), playerOne && playerTwo && React.createElement(\"button\", {\n      className: \"btn dark-btn btn-space\",\n      onClick: () => this.setState({\n        battle: true\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Battle\")));\n  }\n\n}\n\nexport default Battle;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Battle.js"],"names":["React","Component","FaUserFriends","FaFighterJet","FaTrophy","FaTiemsCircle","FaTimesCircle","PropTypes","Results","ThemeConsumer","Instructions","PlayerInput","constructor","props","state","username","handleSubmit","bind","handleChange","event","preventDefault","onSubmit","setState","target","value","render","label","propTypes","func","isRequired","string","PlayerPreview","onReset","Battle","playerOne","playerTwo","battle","handleReset","id","player"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { FaUserFriends, FaFighterJet, FaTrophy, FaTiemsCircle, FaTimesCircle } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport Results from \"./Results\";\nimport { ThemeConsumer } from '../contexts/theme';\n\n\nfunction Instructions() {\n    return(\n        <ThemeConsumer>\n            <div className='instructions-container'>\n                <h1 className='center-text header-lg'>\n                    Instructions\n                </h1>\n                <ol className='container-sm grid center-text battle-instructions'>\n                    <li>\n                        <h3 className='header-sm'>\n                            Enter two Github users\n                        </h3>\n                        <FaUserFriends className='bg-light' color='rgb(255, 191, 116' size={140} />\n                    </li>\n                    <li>\n                        <h3 className='header-sm'>\n                            Battle\n                        </h3>\n                        <FaFighterJet className='bg-light' color='#727272' size={140} />\n                    </li>\n                    <li>\n                        <h3 className='header-sm'>\n                            See the winners\n                        </h3>\n                        <FaTrophy className='bg-light' color='rgb(255, 215, 0)' size={140} />\n                    </li>\n                </ol>\n            </div>\n        </ThemeConsumer>\n    )\n}\n\nclass PlayerInput extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            username: \"\"\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n\n        this.props.onSubmit(this.state.username)\n    }\n\n    handleChange(event) {\n        this.setState({\n            username: event.target.value\n        })\n    }\n\n\n    render() {\n        return(\n            <form className='column player' onSubmit={this.handleSubmit}>\n                <label htmlFor='username' className='player-label' >\n                    {this.props.label}\n                </label>\n                <div className='row player-inputs' >\n                    <input\n                        type='text'\n                        id='username'\n                        className='input-light'\n                        autoComplete='off'\n                        value={this.state.username} //control the value in the component's state\n                        onChange={this.handleChange} //when user inputs, handleChange updates state which then updates value\n                    />\n                    <button \n                        className='btn dark-btn'\n                        type='submit'\n                        disabled={!this.state.username}\n                        >\n                        Submit\n                    </button>\n                </div>\n            </form>\n        )\n    }\n}\n\nPlayerInput.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n    label: PropTypes.string.isRequired\n}\n\n\nfunction PlayerPreview ({ username, onReset, label}) {\n    return (\n        <div className='column player'>\n            <h3 className='player-label'>{label}</h3>\n            <div className='row bg-light'>\n                <div className='player-info'>\n                    <img\n                        className='avatar-sm'\n                        src={`https://github.com/${username}.png?size=200`}\n                        alt={`Avatar for ${username}`}\n                    />\n                    <a \n                        href={`https://github.com/${username}`}\n                        className='link'>\n                            {username}\n                    </a>\n                </div>\n                <button className='btn-clear flex-center' onClick={onReset}>\n                    <FaTimesCircle color='rgb(194, 57, 42)' size={26} />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nPlayerPreview.propTypes = {\n    username: PropTypes.string.isRequired,\n    onReset: PropTypes.func.isRequired,\n    label: PropTypes.string.isRequired\n}\n\n\nclass Battle extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n            playerOne: null,\n            playerTwo: null,\n            battle: false\n        }\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.handleReset = this.handleReset.bind(this)\n    }\n\n    handleSubmit(id, player) {\n        this.setState ({\n            [id]: player\n        })\n    }\n\n    handleReset(id) {\n        this.setState({\n            [id]: null\n        })\n    }\n\n    render() {\n        const { playerOne, playerTwo, battle } = this.state\n\n        if (battle === true)  {\n            return (\n                <Results \n                    playerOne={playerOne}\n                    playerTwo={playerTwo}\n                    onReset={() => this.setState({\n                        playerOne: null,\n                        playerTwo: null,\n                        battle: false\n                    })}\n                />\n            )\n        }\n\n        return(\n          <React.Fragment>\n            <Instructions />\n\n            <div className='players-container'>\n                <h1 className='center-text header-lg'> Players </h1>\n                <div className='row space-around'>\n                    {playerOne === null //if we haven't already rendered player1, render it\n                        ? <PlayerInput\n                            label='Player One'\n                            onSubmit={(player) => this.handleSubmit('playerOne', player)}\n                        />\n                        : <PlayerPreview //if we have rendered player1 show preview of player\n                            username={playerOne} \n                            label='Player One' \n                            onReset={() => this.handleReset('playerOne')}\n                        />\n                    }  \n\n                    {playerTwo === null //if we haven't already rendered player2, render it\n                        ? <PlayerInput\n                            label='Player Two'\n                            onSubmit={(player) => this.handleSubmit('playerTwo', player)}\n                        />\n                        : <PlayerPreview //if we have rendered player2 show preview of player\n                            username={playerTwo} \n                            label='Player Two' \n                            onReset={() => this.handleReset('playerTwo')}\n                        />\n                    }  \n                </div>\n\n\n                   {playerOne && playerTwo && (\n                        <button \n                            className='btn dark-btn btn-space'\n                            onClick={() => this.setState({battle: true})}>\n                            Battle\n                        </button>\n                   )} \n            </div>\n          </React.Fragment>  \n        )\n    }\n}\n\nexport default Battle\n"]},"metadata":{},"sourceType":"module"}