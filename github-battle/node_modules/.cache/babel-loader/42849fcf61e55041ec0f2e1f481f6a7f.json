{"ast":null,"code":"import _slicedToArray from \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/github-battle/github-battle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/github-battle/github-battle/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/github-battle/github-battle/src/components/Popular.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchPopularRepos } from '../utils/api';\nimport { FaUser, FaStar, FaCodeBranch, FaExclamationTriangle } from 'react-icons/fa';\nimport Card from './Card';\nimport Loading from './Loading';\nimport Tooltip from './Tooltip';\n\nconst LanguagesNav = ({\n  selected,\n  onUpdateLanguage\n}) => {\n  const languages = ['All', 'Ruby', 'Javascript', 'Java', 'CSS', 'Python'];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"flex-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, languages.map(language => React.createElement(\"li\", {\n    key: language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => onUpdateLanguage(language),\n    style: language === selected ? {\n      color: 'maroon'\n    } : null,\n    className: \"btn-clear nav-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, language)))));\n};\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n};\n\nconst ReposGrid = ({\n  repos\n}) => {\n  return React.createElement(\"ul\", {\n    className: \"grid space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, repos.map((repo, index) => {\n    const name = repo.name,\n          owner = repo.owner,\n          html_url = repo.html_url,\n          stargazers_count = repo.stargazers_count,\n          forks = repo.forks,\n          open_issues = repo.open_issues;\n    const login = owner.login,\n          avatar_url = owner.avatar_url;\n    return React.createElement(\"li\", {\n      key: html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Card, {\n      header: \"#\".concat(index + 1),\n      avatar: avatar_url,\n      href: html_url,\n      name: login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"card-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      text: \"Github username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FaUser, {\n      color: \"rgb(255, 191, 116)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"https://github.com/\".concat(login),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, login))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(FaStar, {\n      color: \"rgb(255, 215, 0)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), stargazers_count.toLocaleString(), \" stars\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(FaCodeBranch, {\n      color: \"rgb(129, 195, 245)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), forks.toLocaleString(), \" forks\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(FaExclamationTriangle, {\n      color: \"rgb(241, 138, 147)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), open_issues.toLocaleString(), \" open\"))));\n  }));\n};\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired\n};\n\nconst popularReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_success':\n      return _objectSpread({}, state, {\n        [action.selectedLanguage]: action.payload,\n        error: null\n      });\n\n    case 'error':\n      return _objectSpread({}, state, {\n        error: action.error.message\n      });\n\n    default:\n      throw new Error(\"That action type isn't supported.\");\n  }\n};\n\nconst Popular = () => {\n  const _useState = useState('All'),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedLanguage = _useState2[0],\n        setSelectedLanguage = _useState2[1];\n\n  const _useReducer = useReducer(popularReducer, {\n    error: null\n  }),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1]; // Keep track of the languages we've already fetched with useRef to simplify useEffect dependency array\n\n\n  const fetchedLanguages = useRef([]);\n  useEffect(() => {\n    //only fetch if you don't already have cached\n    if (!fetchedLanguages.current.includes(selectedLanguage)) {\n      fetchedLanguages.current.push(selectedLanguage);\n      fetchPopularRepos(selectedLanguage).then(data => {\n        dispatch({\n          type: 'fetch_success',\n          selectedLanguage,\n          payload: data\n        });\n      }).catch(error => {\n        dispatch({\n          type: 'error',\n          error\n        });\n      });\n    }\n  }, [fetchedLanguages, selectedLanguage]);\n\n  const isLoading = () => {\n    //returns if that repo hasn't cached yet and no errors -- aka it's loading\n    return !state[selectedLanguage] && error === null;\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(LanguagesNav, {\n    selected: selectedLanguage,\n    onUpdateLanguage: setSelectedLanguage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }), isLoading() && React.createElement(Loading, {\n    text: \"Fetching Repos\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }), ' ', state.error && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, state.error), state[selectedLanguage] && React.createElement(ReposGrid, {\n    repos: state[selectedLanguage],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }), ' ');\n};\n\nexport default Popular;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/github-battle/github-battle/src/components/Popular.js"],"names":["React","useEffect","useState","useRef","PropTypes","fetchPopularRepos","FaUser","FaStar","FaCodeBranch","FaExclamationTriangle","Card","Loading","Tooltip","LanguagesNav","selected","onUpdateLanguage","languages","map","language","color","propTypes","string","isRequired","func","ReposGrid","repos","repo","index","name","owner","html_url","stargazers_count","forks","open_issues","login","avatar_url","toLocaleString","array","popularReducer","state","action","type","selectedLanguage","payload","error","message","Error","Popular","setSelectedLanguage","useReducer","dispatch","fetchedLanguages","current","includes","push","then","data","catch","isLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchPopularRepos } from '../utils/api';\nimport {\n  FaUser,\n  FaStar,\n  FaCodeBranch,\n  FaExclamationTriangle,\n} from 'react-icons/fa';\nimport Card from './Card';\nimport Loading from './Loading';\nimport Tooltip from './Tooltip';\n\nconst LanguagesNav = ({ selected, onUpdateLanguage }) => {\n  const languages = ['All', 'Ruby', 'Javascript', 'Java', 'CSS', 'Python'];\n\n  return (\n    <div>\n      <ul className='flex-center'>\n        {languages.map((language) => (\n          <li key={language}>\n            <button\n              onClick={() => onUpdateLanguage(language)}\n              style={language === selected ? { color: 'maroon' } : null}\n              className='btn-clear nav-link'\n            >\n              {language}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired,\n};\n\nconst ReposGrid = ({ repos }) => {\n  return (\n    <ul className='grid space-around'>\n      {repos.map((repo, index) => {\n        const {\n          name,\n          owner,\n          html_url,\n          stargazers_count,\n          forks,\n          open_issues,\n        } = repo;\n        const { login, avatar_url } = owner;\n\n        return (\n          <li key={html_url}>\n            <Card\n              header={`#${index + 1}`}\n              avatar={avatar_url}\n              href={html_url}\n              name={login}\n            >\n              <ul className='card-list'>\n                <li>\n                  <Tooltip text='Github username'>\n                    <FaUser color='rgb(255, 191, 116)' size={22} />\n                    <a href={`https://github.com/${login}`}>{login}</a>\n                  </Tooltip>\n                </li>\n                <li>\n                  <FaStar color='rgb(255, 215, 0)' size={22} />\n                  {stargazers_count.toLocaleString()} stars\n                </li>\n                <li>\n                  <FaCodeBranch color='rgb(129, 195, 245)' size={22} />\n                  {forks.toLocaleString()} forks\n                </li>\n                <li>\n                  <FaExclamationTriangle color='rgb(241, 138, 147)' size={22} />\n                  {open_issues.toLocaleString()} open\n                </li>\n              </ul>\n            </Card>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired,\n};\n\nconst popularReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetch_success':\n      return {\n        ...state,\n        [action.selectedLanguage]: action.payload,\n        error: null,\n      };\n    case 'error':\n      return { ...state, error: action.error.message };\n    default:\n      throw new Error(`That action type isn't supported.`);\n  }\n};\n\nconst Popular = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState('All');\n  const [state, dispatch] = useReducer(popularReducer, {\n    error: null,\n  });\n\n  // Keep track of the languages we've already fetched with useRef to simplify useEffect dependency array\n  const fetchedLanguages = useRef([]);\n\n  useEffect(() => {\n    //only fetch if you don't already have cached\n\n    if (!fetchedLanguages.current.includes(selectedLanguage)) {\n      fetchedLanguages.current.push(selectedLanguage);\n\n      fetchPopularRepos(selectedLanguage)\n        .then((data) => {\n          dispatch({ type: 'fetch_success', selectedLanguage, payload: data });\n        })\n        .catch((error) => {\n          dispatch({ type: 'error', error });\n        });\n    }\n  }, [fetchedLanguages, selectedLanguage]);\n\n  const isLoading = () => {\n    //returns if that repo hasn't cached yet and no errors -- aka it's loading\n    return !state[selectedLanguage] && error === null;\n  };\n\n  return (\n    <React.Fragment>\n      <LanguagesNav\n        selected={selectedLanguage}\n        onUpdateLanguage={setSelectedLanguage}\n      />\n      {/*display LOADING if loading*/}\n      {isLoading() && <Loading text='Fetching Repos' />}{' '}\n      {/*display error message if error*/}\n      {state.error && <p>{state.error}</p>}\n      {/*display repos object as string*/}\n      {state[selectedLanguage] && (\n        <ReposGrid repos={state[selectedLanguage]} />\n      )}{' '}\n    </React.Fragment>\n  );\n};\n\nexport default Popular;\n"]},"metadata":{},"sourceType":"module"}