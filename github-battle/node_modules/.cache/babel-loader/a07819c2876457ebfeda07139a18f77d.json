{"ast":null,"code":"const id = \"YOUR_CLIENT_ID\";\nconst sec = \"YOUR_SECRET_ID\";\nconst params = \"?client_id=\".concat(id, \"&client_secret=\").concat(sec);\n\nfunction getErrorMsg(message, uersname) {\n  if (message === 'Not Found') {\n    return \"\".concat(username, \" doesn't exist\");\n  }\n\n  return message;\n}\n\nfunction getProfile(username) {\n  return fetch(\"https://api.github.com/users/\".concat(username).concat(params)).then(res => res.json()).then(profile => {\n    if (profile.message) {\n      throw new Error(getErrorMsg(profile.message, username));\n    }\n\n    return profile;\n  });\n}\n\nfunction getRepos(username) {\n  return fetch(\"https://api.github.com/users/\".concat(username, \"/repos\").concat(params, \"&per_page=100\"));\n}\n\nexport function fetchPopularRepos(language) {\n  const endpoint = window.encodeURI(\"https://api.github.com/search/repositories?q=stars:>1+language:\".concat(language, \"&sort=stars&order=desc&type=Repositories\"));\n  return fetch(endpoint) //make request to github api\n  .then(res => res.json()) //turn response into json\n  .then(data => {\n    if (!data.items) {\n      //if there aren't any items throw an error\n      throw new Error(data.message);\n    }\n\n    return data.items; //return array of repos if they exist\n  });\n}","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/utils/api.js"],"names":["id","sec","params","getErrorMsg","message","uersname","username","getProfile","fetch","then","res","json","profile","Error","getRepos","fetchPopularRepos","language","endpoint","window","encodeURI","data","items"],"mappings":"AAAA,MAAMA,EAAE,GAAG,gBAAX;AACA,MAAMC,GAAG,GAAG,gBAAZ;AACA,MAAMC,MAAM,wBAAiBF,EAAjB,4BAAqCC,GAArC,CAAZ;;AAEA,SAASE,WAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EAAyC;AACrC,MAAID,OAAO,KAAK,WAAhB,EAA6B;AACzB,qBAAUE,QAAV;AACH;;AACD,SAAOF,OAAP;AACH;;AAED,SAASG,UAAT,CAAqBD,QAArB,EAA+B;AAC3B,SAAOE,KAAK,wCAAiCF,QAAjC,SAA4CJ,MAA5C,EAAL,CACFO,IADE,CACIC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADZ,EAEFF,IAFE,CAEIG,OAAD,IAAa;AACf,QAAIA,OAAO,CAACR,OAAZ,EAAqB;AACjB,YAAM,IAAIS,KAAJ,CAAUV,WAAW,CAACS,OAAO,CAACR,OAAT,EAAkBE,QAAlB,CAArB,CAAN;AACH;;AACD,WAAOM,OAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASE,QAAT,CAAmBR,QAAnB,EAA6B;AACzB,SAAOE,KAAK,wCAAiCF,QAAjC,mBAAkDJ,MAAlD,mBAAZ;AACH;;AAED,OAAO,SAASa,iBAAT,CAA4BC,QAA5B,EAAsC;AACzC,QAAMC,QAAQ,GAAGC,MAAM,CAACC,SAAP,0EAAmFH,QAAnF,8CAAjB;AAEA,SAAOR,KAAK,CAACS,QAAD,CAAL,CAAgB;AAAhB,GACFR,IADE,CACIC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADZ,EACwB;AADxB,GAEFF,IAFE,CAEIW,IAAD,IAAU;AACZ,QAAI,CAACA,IAAI,CAACC,KAAV,EAAiB;AAAE;AACf,YAAM,IAAIR,KAAJ,CAAUO,IAAI,CAAChB,OAAf,CAAN;AACH;;AACD,WAAOgB,IAAI,CAACC,KAAZ,CAJY,CAIM;AACrB,GAPE,CAAP;AAQH","sourcesContent":["const id = \"YOUR_CLIENT_ID\"\nconst sec = \"YOUR_SECRET_ID\"\nconst params = `?client_id=${id}&client_secret=${sec}`\n\nfunction getErrorMsg (message, uersname) {\n    if (message === 'Not Found') {\n        return `${username} doesn't exist`\n    }\n    return message\n}\n\nfunction getProfile (username) {\n    return fetch(`https://api.github.com/users/${username}${params}`)\n        .then((res) => res.json())\n        .then((profile) => {\n            if (profile.message) {\n                throw new Error(getErrorMsg(profile.message, username))\n            }\n            return profile\n        })\n}\n\nfunction getRepos (username) {\n    return fetch(`https://api.github.com/users/${username}/repos${params}&per_page=100`)\n}\n\nexport function fetchPopularRepos (language) {\n    const endpoint = window.encodeURI(`https://api.github.com/search/repositories?q=stars:>1+language:${language}&sort=stars&order=desc&type=Repositories`)\n\n    return fetch(endpoint) //make request to github api\n        .then((res) => res.json()) //turn response into json\n        .then((data) => { \n            if (!data.items) { //if there aren't any items throw an error\n                throw new Error(data.message)\n            }\n            return data.items //return array of repos if they exist\n        })\n}"]},"metadata":{},"sourceType":"module"}