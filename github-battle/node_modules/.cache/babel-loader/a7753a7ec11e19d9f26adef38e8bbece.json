{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Loading.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nconst styles = {\n  //keeping it all in one file for max reusability\n  content: {\n    fontSize: '35px',\n    position: 'absolute',\n    left: '0',\n    right: '0',\n    marginTop: '20px',\n    textAlign: 'center'\n  }\n};\n\nclass Loading extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: props.text\n    };\n  }\n\n  componentDidMount() {\n    //every 300ms either add a dot or reset to 'Loading'\n    const _this$props = this.props,\n          speech = _this$props.speech,\n          text = _this$props.text;\n    this.interval = window.setInterval(() => {\n      this.state.content === 'Loading' + '...' ? this.setState({\n        content: 'Loading'\n      }) : this.setState(({\n        content\n      }) => ({\n        content: content + '.'\n      }));\n    }, 300);\n  }\n\n  componentWillUnmount() {\n    //clear the timer when the component unmounts\n    window.clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(\"p\", {\n      style: styles.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, this.state.content);\n  }\n\n}\n\nLoading.PropTypes = {\n  text: PropTypes.string.isRequired,\n  speed: PropTypes.number.isRequired\n};\nexport default Loading;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Loading.js"],"names":["React","Component","PropTypes","styles","content","fontSize","position","left","right","marginTop","textAlign","Loading","constructor","props","state","text","componentDidMount","speech","interval","window","setInterval","setState","componentWillUnmount","clearInterval","render","string","isRequired","speed","number"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,MAAM,GAAG;AAAE;AACbC,EAAAA,OAAO,EAAE;AACLC,IAAAA,QAAQ,EAAE,MADL;AAELC,IAAAA,QAAQ,EAAE,UAFL;AAGLC,IAAAA,IAAI,EAAE,GAHD;AAILC,IAAAA,KAAK,EAAE,GAJF;AAKLC,IAAAA,SAAS,EAAE,MALN;AAMLC,IAAAA,SAAS,EAAE;AANN;AADE,CAAf;;AAWA,MAAMC,OAAN,SAAsBV,SAAtB,CAAgC;AAC5BW,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTV,MAAAA,OAAO,EAAES,KAAK,CAACE;AADN,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAI;AAAE;AAAF,wBACQ,KAAKH,KADb;AAAA,UACTI,MADS,eACTA,MADS;AAAA,UACDF,IADC,eACDA,IADC;AAGjB,SAAKG,QAAL,GAAgBC,MAAM,CAACC,WAAP,CAAmB,MAAM;AACrC,WAAKN,KAAL,CAAWV,OAAX,KAAuB,YAAY,KAAnC,GACE,KAAKiB,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAE;AAAX,OAAd,CADF,GAEE,KAAKiB,QAAL,CAAc,CAAC;AAACjB,QAAAA;AAAD,OAAD,MAAgB;AAAEA,QAAAA,OAAO,EAAEA,OAAO,GAAG;AAArB,OAAhB,CAAd,CAFF;AAGH,KAJe,EAIb,GAJa,CAAhB;AAKH;;AAEDkB,EAAAA,oBAAoB,GAAI;AAAE;AACtBH,IAAAA,MAAM,CAACI,aAAP,CAAqB,KAAKL,QAA1B;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,WACI;AAAG,MAAA,KAAK,EAAErB,MAAM,CAACC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKU,KAAL,CAAWV,OADhB,CADJ;AAKH;;AA7B2B;;AAgChCO,OAAO,CAACT,SAAR,GAAoB;AAChBa,EAAAA,IAAI,EAAEb,SAAS,CAACuB,MAAV,CAAiBC,UADP;AAEhBC,EAAAA,KAAK,EAAEzB,SAAS,CAAC0B,MAAV,CAAiBF;AAFR,CAApB;AAKA,eAAef,OAAf","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nconst styles = { //keeping it all in one file for max reusability\n    content: {\n        fontSize: '35px',\n        position: 'absolute',\n        left: '0',\n        right: '0',\n        marginTop: '20px',\n        textAlign: 'center'\n    }\n}\n\nclass Loading extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            content: props.text\n        }\n    }\n\n    componentDidMount () { //every 300ms either add a dot or reset to 'Loading'\n        const { speech, text } = this.props\n\n        this.interval = window.setInterval(() => {\n            this.state.content === 'Loading' + '...'\n            ? this.setState({ content: 'Loading' })\n            : this.setState(({content}) => ({ content: content + '.' }))\n        }, 300)\n    }\n\n    componentWillUnmount () { //clear the timer when the component unmounts\n        window.clearInterval(this.interval)\n    }\n\n    render() {\n        return (\n            <p style={styles.content}>\n                {this.state.content}\n            </p>\n        )\n    }\n}\n\nLoading.PropTypes = {\n    text: PropTypes.string.isRequired,\n    speed: PropTypes.number.isRequired\n}\n\nexport default Loading"]},"metadata":{},"sourceType":"module"}