{"ast":null,"code":"import _defineProperty from \"/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Popular.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchPopularRepos } from '../utils/api';\nimport { FaUser, FaStar, FaCodeBranch, FaExclamationTriangle } from 'react-icons/fa';\nimport Card from './Card';\nimport Loading from './Loading';\nimport Tooltip from './Tooltip';\n\nfunction LanguagesNav({\n  selected,\n  onUpdateLanguage\n}) {\n  const languages = [\"All\", \"Ruby\", \"Javascript\", \"Java\", \"CSS\", \"Python\"];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"flex-center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, languages.map(language => React.createElement(\"li\", {\n    key: language,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => onUpdateLanguage(language),\n    style: language === selected ? {\n      color: 'maroon'\n    } : null,\n    className: \"btn-clear nav-link\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, language)))));\n}\n\nLanguagesNav.propTypes = {\n  selected: PropTypes.string.isRequired,\n  onUpdateLanguage: PropTypes.func.isRequired\n};\n\nfunction ReposGrid({\n  repos\n}) {\n  return React.createElement(\"ul\", {\n    className: \"grid space-around\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, repos.map((repo, index) => {\n    const name = repo.name,\n          owner = repo.owner,\n          html_url = repo.html_url,\n          stargazers_count = repo.stargazers_count,\n          forks = repo.forks,\n          open_issues = repo.open_issues;\n    const login = owner.login,\n          avatar_url = owner.avatar_url;\n    return React.createElement(\"li\", {\n      key: html_url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Card, {\n      header: \"#\".concat(index + 1),\n      avatar: avatar_url,\n      href: html_url,\n      name: login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"card-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(Tooltip, {\n      text: \"Github username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(FaUser, {\n      color: \"rgb(255, 191, 116)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }), React.createElement(\"a\", {\n      href: \"https://github.com/\".concat(login),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, login))), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(FaStar, {\n      color: \"rgb(255, 215, 0)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), stargazers_count.toLocaleString(), \" stars\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(FaCodeBranch, {\n      color: \"rgb(129, 195, 245)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), forks.toLocaleString(), \" forks\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(FaExclamationTriangle, {\n      color: \"rgb(241, 138, 147)\",\n      size: 22,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), open_issues.toLocaleString(), \" open\"))));\n  }));\n}\n\nReposGrid.propTypes = {\n  repos: PropTypes.array.isRequired\n};\n\nclass Popular extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedLanguage: \"All\",\n      repos: {},\n      error: null\n    };\n    this.updateLanguage = this.updateLanguage.bind(this);\n    this.isLoading = this.isLoading.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateLanguage(this.state.selectedLanguage);\n  }\n\n  updateLanguage(selectedLanguage) {\n    const error = this.state.error;\n    this.setState({\n      selectedLanguage,\n      error: null\n    });\n\n    if (!this.state.repos[selectedLanguage]) {\n      //only fetch if you don't already have cached    \n      fetchPopularRepos(selectedLanguage).then(data => {\n        //set data as property on repos object\n        this.setState(({\n          repos\n        }) => ({\n          repos: _objectSpread({}, repos, {\n            [selectedLanguage]: data //assign new data on the selected language to its key\n\n          })\n        }));\n      }).catch(() => {\n        console.warn('Error fetching repos: ', error); //if error, warn the developer\n\n        this.setState({\n          //warn the user if error\n          error: 'There was an error fetching the repositories.'\n        });\n      });\n    }\n  }\n\n  isLoading() {\n    //returns if that repo hasn't cached yet and no errors -- aka it's loading\n    const _this$state = this.state,\n          selectedLanguage = _this$state.selectedLanguage,\n          repos = _this$state.repos,\n          error = _this$state.error;\n    return !repos[selectedLanguage] && this.state.error === null;\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          selectedLanguage = _this$state2.selectedLanguage,\n          repos = _this$state2.repos,\n          error = _this$state2.error;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(LanguagesNav, {\n      selected: selectedLanguage,\n      onUpdateLanguage: this.updateLanguage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), this.isLoading() && React.createElement(Loading, {\n      text: \"Fetching Repos\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), \"  \", error && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, error), \"  \", repos[selectedLanguage] && React.createElement(ReposGrid, {\n      repos: repos[selectedLanguage],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), \" \");\n  }\n\n}\n\nexport default Popular;","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/PRACTICE REACT/mcginnis-app/src/components/Popular.js"],"names":["React","Component","PropTypes","fetchPopularRepos","FaUser","FaStar","FaCodeBranch","FaExclamationTriangle","Card","Loading","Tooltip","LanguagesNav","selected","onUpdateLanguage","languages","map","language","color","propTypes","string","isRequired","func","ReposGrid","repos","repo","index","name","owner","html_url","stargazers_count","forks","open_issues","login","avatar_url","toLocaleString","array","Popular","constructor","props","state","selectedLanguage","error","updateLanguage","bind","isLoading","componentDidMount","setState","then","data","catch","console","warn","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchPopularRepos } from '../utils/api';\nimport { FaUser, FaStar, FaCodeBranch, FaExclamationTriangle } from 'react-icons/fa';\nimport Card from './Card';\nimport Loading from './Loading';\nimport Tooltip from './Tooltip';\n\n\nfunction LanguagesNav({selected, onUpdateLanguage}) {\n    const languages = [\"All\", \"Ruby\", \"Javascript\", \"Java\", \"CSS\", \"Python\"]\n\n    return (\n        <div>\n            <ul className=\"flex-center\">\n                {languages.map(language =>\n                <li key={language}>\n                    <button \n                        onClick={() => onUpdateLanguage(language)} \n                        style={language === selected ? { color: 'maroon' } : null}\n                        className=\"btn-clear nav-link\">\n                        {language}\n                    </button>\n                </li>\n                )}\n            </ul>\n        </div>\n    )\n}\n\nLanguagesNav.propTypes = {\n    selected: PropTypes.string.isRequired,\n    onUpdateLanguage: PropTypes.func.isRequired\n}\n\nfunction ReposGrid({ repos }) {\n    return (\n        <ul className='grid space-around'>\n            {repos.map((repo, index) => {\n                const { name, owner, html_url, stargazers_count, forks, open_issues } = repo\n                const { login, avatar_url } = owner\n\n                return (\n                    <li key={html_url}>\n                        <Card\n                            header={`#${index + 1}`}\n                            avatar={avatar_url}\n                            href={html_url}\n                            name={login}\n                        >\n                            <ul className='card-list'>\n                                <li>\n                                    <Tooltip text=\"Github username\">\n                                        <FaUser color='rgb(255, 191, 116)' size={22} />\n                                        <a href={`https://github.com/${login}`}>\n                                            {login}\n                                        </a>\n                                    </Tooltip>\n                                </li>\n                                <li>\n                                    <FaStar color='rgb(255, 215, 0)' size={22} />\n                                    {stargazers_count.toLocaleString()} stars\n                                </li>\n                                <li>\n                                    <FaCodeBranch color='rgb(129, 195, 245)' size={22} />\n                                    {forks.toLocaleString()} forks  \n                                </li>\n                                <li>\n                                    <FaExclamationTriangle color='rgb(241, 138, 147)' size={22} />\n                                    {open_issues.toLocaleString()} open\n                                </li>\n                            </ul>\n                        </Card>\n                    </li>\n                )    \n            })}\n        </ul>\n    )\n}\n\nReposGrid.propTypes = {\n    repos: PropTypes.array.isRequired\n}\n\nclass Popular extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state={\n            selectedLanguage: \"All\",\n            repos: {},\n            error: null\n        }\n    this.updateLanguage = this.updateLanguage.bind(this)\n    this.isLoading = this.isLoading.bind(this)\n    }\n\n    componentDidMount() {\n        this.updateLanguage(this.state.selectedLanguage)\n    }\n\n    updateLanguage(selectedLanguage){\n        const { error } = this.state\n\n        this.setState({\n            selectedLanguage,\n            error: null,\n        })\n\n        if (!this.state.repos[selectedLanguage]) { //only fetch if you don't already have cached    \n            fetchPopularRepos(selectedLanguage)\n                .then((data) => { //set data as property on repos object\n                    this.setState(({ repos }) => ({\n                        repos: {//take all values on current repos and merge with new data\n                            ...repos, \n                            [selectedLanguage]: data //assign new data on the selected language to its key\n                        }\n                    }))\n                })\n                .catch(() => {\n                    console.warn('Error fetching repos: ', error) //if error, warn the developer\n\n                    this.setState({ //warn the user if error\n                        error: 'There was an error fetching the repositories.'\n                    })\n                }) \n        }\n\n    }\n\n    isLoading() { //returns if that repo hasn't cached yet and no errors -- aka it's loading\n        const { selectedLanguage, repos, error } = this.state\n        return !repos[selectedLanguage] && this.state.error === null\n    }\n\n    render() {\n        const { selectedLanguage, repos, error } = this.state\n\n        return(\n            <React.Fragment>\n                <LanguagesNav \n                    selected={selectedLanguage}\n                    onUpdateLanguage={this.updateLanguage}\n                />\n                {this.isLoading() && <Loading text='Fetching Repos'/>}  {/*display LOADING if loading*/}\n\n                {error && <p>{error}</p>}  {/*display error message if error*/}\n\n                {repos[selectedLanguage] && <ReposGrid repos={repos[selectedLanguage]} />} {/*display repos object as string*/}\n            </React.Fragment>\n        )\n    }\n}\n\n\n\nexport default Popular;\n"]},"metadata":{},"sourceType":"module"}